// Exemplo 1: Contando o número de documentos
db.sales.aggregate([
  {
    $group: {
      _id: null,
      count: { $sum: 1 },
    },
  }
]);
// db.sales.count();
// SELECT COUNT(*) AS count FROM sales;

// Exemplo 2: Retornando valores distintos
db.sales.aggregate([
  {
    $group: {
      _id: "$item",
      count: { $sum: 1 },
    },
  }
]);

// Exemplo 3: Somando valores
db.sales.aggregate([
  {
    $group: {
      _id: "$item",
      totalSaleAmount: {
        $sum: {
          $multiply: ["$price", "$quantity"],
        },
      },
    },
  }
]);
// SELECT item, SUM(price * quantity) AS totalSaleAmount
// FROM sales
// GROUP BY item;

// Exemplo 4: Having (do Mysql), combinando estágios no aggregate
db.sales.aggregate([
  // Primeiro Estágio
  {
    $group: {
      _id: "$item",
      totalSaleAmount: {
        $sum: {
          $multiply: ["$price", "$quantity"],
        },
      },
    },
  },
  // Segundo Estágio
  {
    match: { totalSaleAmount: { $gte: 100 } },
  }
]);
// SELECT item, SUM(price * quantity) AS totalSaleAmount
// FROM sales
// GROUP BY item
// HAVING totalSaleAmount >= 100;

// Exemplo 5: Agrupando por null
db.sales.aggregate([
  {
    $group: {
      _id: null,
      totalSaleAmount: {
        $sum: { $$multiply: ["$price", "$quantity"] },
      },
      averageQuantity: { $avg: "$quantity" },
      count: { $sum: 1 },
    },
  }
]);
// SELECT SUM(price * quantity) AS totalSaleAmount,
//        AVG(quantity)         AS averageQuantity,
//        COUNT(*)              AS count
// FROM sales;

// Para Fixar
// 1 - Selecione todos os bancos, ou seja, valores do campo bank ;
db.transactions.aggregate([
  {
    $group: {
      _id: "$bank",
      bank: { $sum: 1 },
    },
  }
]);

// 2 - Selecione o valor total das transações em cada banco e quantas são.
db.transactions.aggregate([
  {
    $group: {
      _id: "$bank",
      valorTotal: { $sum: "$value" },
      numeroDeTrasasoes: { $sum: 1 },
    },
  }
]);

// 3 - Selecione o valor total de transações.
db.transactions.aggregate([
  {
    $group: {
      _id: "$bank",
      valorTotal: { $sum: "$value" },
    },
  }
]);

// 4 - Selecione os bancos que têm o valor total de transações maior que 1000.
db.transactions.aggregate([
  { $match: { valorTotal: { $gt: 1000 } } },
  {
    $group: {
      _id: "$bank",
      valorTotal: { $sum: "$value" },
    },
  }
]);
